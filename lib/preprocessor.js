// Generated by CoffeeScript 1.6.2
(function() {
  var Preprocessor, Scanner, util;

  Scanner = require("./scanner");

  util = require("./util");

  module.exports = Preprocessor = (function() {
    Preprocessor.preprocess = function(source) {
      var preprocessor;

      preprocessor = new Preprocessor(source);
      return preprocessor.preprocess();
    };

    function Preprocessor(source) {
      this.scanner = new Scanner(source);
      this.output = "";
      this.level = 0;
      this.index = 0;
      this.record("" + (this.scope()) + " = document.createDocumentFragment()");
    }

    Preprocessor.prototype.preprocess = function() {
      var callback, token, _i, _len, _ref;

      _ref = this.scanner.scan();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        token = _ref[_i];
        callback = this["" + token.type + "_" + token.tag];
        callback || (callback = this["" + token.type]);
        if (callback != null) {
          callback.call(this, token);
        }
      }
      return this.output;
    };

    Preprocessor.prototype.scope = function(index) {
      if (index == null) {
        index = this.index;
      }
      return "__element" + index;
    };

    Preprocessor.prototype.record = function(line) {
      this.output += util.repeat("  ", this.level);
      return this.output += line + "\n";
    };

    Preprocessor.prototype.indent = function() {
      return this.level++;
    };

    Preprocessor.prototype.dedent = function() {
      this.level--;
      if (this.level < 0) {
        return this.fail('Unexpected dedent');
      }
    };

    Preprocessor.prototype.fail = function(msg) {
      throw new Error(msg);
    };

    Preprocessor.prototype.append = function(code) {
      return this.record("" + (this.scope(this.index)) + ".appendChild(" + code + ")");
    };

    Preprocessor.prototype.appendParent = function(code) {
      return this.record("" + (this.scope(this.index - 1)) + ".appendChild(" + code + ")");
    };

    Preprocessor.prototype.eco_end = function(token) {
      return this.dedent();
    };

    Preprocessor.prototype.eco_leftLiteral = function(token) {
      return this.append("document.createTextNode('<%')");
    };

    Preprocessor.prototype.eco_rightLiteral = function(token) {
      return this.append("document.createTextNode('%>')");
    };

    Preprocessor.prototype.eco_expression = function(token) {
      if (token.dedent) {
        this.dedent();
      }
      this.record(token.content);
      if (token.indent) {
        return this.indent();
      }
    };

    Preprocessor.prototype.eco_escapedContent = function(token) {
      return this.append("document.createTextNode(" + token.content + ")");
    };

    Preprocessor.prototype.eco_content = function(token) {
      return this.append("__makeFragment(" + token.content + ")");
    };

    Preprocessor.prototype.cdata = function(token) {};

    Preprocessor.prototype.comment = function(token) {};

    Preprocessor.prototype.doctype = function(token) {};

    Preprocessor.prototype.script = function(token) {};

    Preprocessor.prototype.element = function(token) {
      return this["element_" + token.variant].call(this, token);
    };

    Preprocessor.prototype.element_open = function(token) {
      var attr, scope, _i, _len, _ref;

      scope = this.scope(++this.index);
      this.record("" + scope + " = document.createElement(" + (util.inspect(token.tag)) + ")");
      _ref = token.attributes;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        attr = _ref[_i];
        this.record("" + scope + ".setAttribute(" + (util.inspect(attr.name)) + ", " + (util.inspect(attr.value)) + ")");
      }
      return this.appendParent(scope);
    };

    Preprocessor.prototype.element_close = function(token) {
      return this.index--;
    };

    Preprocessor.prototype.element_inline = function(token) {
      var attr, _i, _len, _ref;

      this.record("__curr = document.createElement(" + (util.inspect(token.tag)) + ")");
      _ref = token.attributes;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        attr = _ref[_i];
        this.record("__curr.setAttribute(" + (util.inspect(attr.name)) + ", " + (util.inspect(attr.value)) + ")");
      }
      return this.append("__curr");
    };

    Preprocessor.prototype.style = function(token) {
      var attr, _i, _len, _ref;

      this.record("__curr = document.createElement('style')");
      _ref = token.attributes;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        attr = _ref[_i];
        this.record("__curr.setAttribute(" + (util.inspect(attr.name)) + ", " + (util.inspect(attr.value)) + ")");
      }
      this.record("__curr.innerHTML = " + (util.inspect(token.content)));
      return this.append("__curr");
    };

    Preprocessor.prototype.text = function(token) {
      return this.append("document.createTextNode(" + (util.inspect(token.content)) + ")");
    };

    return Preprocessor;

  })();

}).call(this);
