// Generated by CoffeeScript 1.6.2
(function() {
  var Preprocessor, Scanner, String, util,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Scanner = require("../scanner");

  util = require("../util");

  String = require("./string");

  module.exports = Preprocessor = (function() {
    Preprocessor.preprocess = function(source) {
      var preprocessor;

      preprocessor = new Preprocessor(source);
      return preprocessor.preprocess();
    };

    function Preprocessor(source) {
      this.source = source;
      this.output = "";
      this.level = 0;
      this.index = 0;
      this.captures = [];
      this.record("" + (this.elementVar()) + " = document.createDocumentFragment()");
    }

    Preprocessor.prototype.preprocess = function() {
      var token, _i, _len, _ref, _ref1;

      _ref = Scanner.scanNodes(this.source);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        token = _ref[_i];
        if ((_ref1 = this[token.type]) != null) {
          _ref1.call(this, token);
        }
      }
      this.record("return " + (this.elementVar()));
      return this.output;
    };

    Preprocessor.prototype.record = function(lines) {
      var line, _i, _len, _ref, _results;

      _ref = lines.split("\n");
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        line = _ref[_i];
        if (!(line)) {
          continue;
        }
        this.output += util.repeat("  ", this.level);
        _results.push(this.output += line + "\n");
      }
      return _results;
    };

    Preprocessor.prototype.indent = function() {
      return this.level++;
    };

    Preprocessor.prototype.dedent = function() {
      this.level--;
      if (this.level < 0) {
        return this.fail('Unexpected dedent');
      }
    };

    Preprocessor.prototype.elementVar = function(index) {
      if (index == null) {
        index = this.index;
      }
      return "__element" + index;
    };

    Preprocessor.prototype.traverseUp = function() {
      this.index--;
      if (this.index < 0) {
        return this.fail('Unexpected traverse');
      }
    };

    Preprocessor.prototype.traverseDown = function() {
      return this.index++;
    };

    Preprocessor.prototype.append = function(code) {
      return this.record("" + (this.elementVar()) + ".appendChild " + code);
    };

    Preprocessor.prototype.appendParent = function(code) {
      return this.record("" + (this.elementVar(this.index - 1)) + ".appendChild " + code);
    };

    Preprocessor.prototype.fail = function(msg) {
      throw new Error(msg);
    };

    Preprocessor.prototype.eco = function(token) {
      if (token.dedent) {
        this.dedent();
      }
      this["eco_" + token.tag].call(this, token);
      if (token.indent || token.directive) {
        this.indent();
      }
      if (token.directive) {
        this.captures.unshift(this.level);
        this.traverseDown();
        return this.record("" + (this.elementVar()) + " = document.createDocumentFragment()");
      }
    };

    Preprocessor.prototype.eco_end = function(token) {
      if (this.captures[0] === this.level) {
        this.captures.shift();
        this.record(this.elementVar());
        this.traverseUp();
      }
      return this.dedent();
    };

    Preprocessor.prototype.eco_leftLiteral = function(token) {
      return this.append("document.createTextNode('<%')");
    };

    Preprocessor.prototype.eco_rightLiteral = function(token) {
      return this.append("document.createTextNode('%>')");
    };

    Preprocessor.prototype.eco_expression = function(token) {
      return this.record(token.content + token.directive);
    };

    Preprocessor.prototype.eco_escapedContent = function(token) {
      if (token.directive) {
        return this.fail('Directive provided for escaped content');
      } else {
        return this.append("document.createTextNode __escape " + token.content);
      }
    };

    Preprocessor.prototype.eco_content = function(token) {
      return this.append("__createFragment " + (token.content + token.directive));
    };

    Preprocessor.prototype.cdata = function(token) {};

    Preprocessor.prototype.comment = function(token) {};

    Preprocessor.prototype.doctype = function(token) {};

    Preprocessor.prototype.script = function(token) {};

    Preprocessor.prototype.voidElements = ['area', 'base', 'br', 'col', 'command', 'embed', 'hr', 'img', 'input', 'keygen', 'link', 'meta', 'param', 'source', 'track', 'wbr'];

    Preprocessor.prototype.element = function(token) {
      var _ref;

      if (_ref = token.tag, __indexOf.call(this.voidElements, _ref) >= 0) {
        return this.element_inline(token);
      } else {
        return this["element_" + token.variant].call(this, token);
      }
    };

    Preprocessor.prototype.element_open = function(token) {
      var element;

      this.traverseDown();
      element = this.elementVar();
      this.record("" + element + " = document.createElement(" + (util.inspect(token.tag)) + ")");
      this.recordElementAttributes(element, token.attributes);
      return this.appendParent(element);
    };

    Preprocessor.prototype.element_close = function(token) {
      return this.traverseUp();
    };

    Preprocessor.prototype.element_inline = function(token) {
      this.record("__curr = document.createElement(" + (util.inspect(token.tag)) + ")");
      this.recordElementAttributes("__curr", token.attributes);
      return this.append("__curr");
    };

    Preprocessor.prototype.style = function(token) {
      this.record("__curr = document.createElement('style')");
      this.recordElementAttributes("__curr", token.attributes);
      this.record("__curr.innerHTML = " + (util.inspect(token.content)));
      return this.append("__curr");
    };

    Preprocessor.prototype.text = function(token) {
      return this.append("document.createTextNode(" + (util.inspect(token.content)) + ")");
    };

    Preprocessor.prototype.recordElementAttributes = function(element, attributes) {
      var attr, _i, _len, _results;

      _results = [];
      for (_i = 0, _len = attributes.length; _i < _len; _i++) {
        attr = attributes[_i];
        _results.push(this.recordElementAttribute(element, attr.name, attr.value));
      }
      return _results;
    };

    Preprocessor.prototype.recordElementAttribute = function(element, name, value) {
      if (value == null) {
        value = '';
      }
      if (value.match(/<%/)) {
        this.record("__value = do ->");
        this.indent();
        this.record(String.preprocess(value));
        this.dedent();
        return this.record("" + element + ".setAttribute(" + (util.inspect(name)) + ", __value)");
      } else {
        return this.record("" + element + ".setAttribute(" + (util.inspect(name)) + ", " + (util.inspect(value)) + ")");
      }
    };

    return Preprocessor;

  })();

}).call(this);
