// Generated by CoffeeScript 1.6.2
(function() {
  var exports, isDigit, observe, observeEach, toArray,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  exports = this.exports || this.cftTemplates || (this.cftTemplates = {});

  isDigit = function(value) {
    return /^\d$/.test(value);
  };

  toArray = function(value) {
    return Array.prototype.slice.call(value, 0);
  };

  exports.observe = observe = function(object, callback) {
    var nodes, render;

    nodes = [];
    render = function() {
      var fragment, newNode, newNodes, node, parent, _i, _j, _len, _len1;

      fragment = callback(object);
      newNodes = (function() {
        var _i, _len, _ref, _results;

        _ref = fragment.childNodes;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          node = _ref[_i];
          _results.push(node);
        }
        return _results;
      })();
      parent = nodes[0] && nodes[0].parentNode;
      if (parent) {
        for (_i = 0, _len = newNodes.length; _i < _len; _i++) {
          newNode = newNodes[_i];
          parent.insertBefore(newNode, nodes[0]);
        }
        for (_j = 0, _len1 = nodes.length; _j < _len1; _j++) {
          node = nodes[_j];
          parent.removeChild(node);
        }
      }
      nodes = newNodes;
      return fragment;
    };
    Object.observe(object, render);
    return render();
  };

  exports.observeEach = observeEach = function(array, callback) {
    var add, arrayClone, arrayNodes, change, frag, fragment, n, remove, value, _i, _len;

    fragment = document.createDocumentFragment();
    arrayNodes = [];
    arrayClone = toArray(array);
    for (_i = 0, _len = array.length; _i < _len; _i++) {
      value = array[_i];
      frag = observe(value, callback);
      arrayNodes.push((function() {
        var _j, _len1, _ref, _results;

        _ref = frag.childNodes;
        _results = [];
        for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
          n = _ref[_j];
          _results.push(n);
        }
        return _results;
      })());
      fragment.appendChild(frag);
    }
    add = function(index, value) {
      var nodes, previousNode;

      frag = observe(value, callback);
      nodes = (function() {
        var _j, _len1, _ref, _results;

        _ref = frag.childNodes;
        _results = [];
        for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
          n = _ref[_j];
          _results.push(n);
        }
        return _results;
      })();
      previousNode = arrayNodes[index - 1];
      previousNode = previousNode != null ? previousNode[previousNode.length - 1] : void 0;
      if (previousNode != null) {
        previousNode.parentNode.insertBefore(frag, previousNode.nextSibling);
      }
      return arrayNodes.splice(index - 1, 0, nodes);
    };
    remove = function(index) {
      var node, _j, _len1, _ref, _ref1;

      _ref = arrayNodes[index];
      for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
        node = _ref[_j];
        if ((_ref1 = node.parentNode) != null) {
          _ref1.removeChild(node);
        }
      }
      return arrayNodes.splice(index, 1);
    };
    change = function() {
      var added, args, i, item, removed, _j, _k, _len1, _len2;

      removed = (function() {
        var _j, _len1, _results;

        _results = [];
        for (i = _j = 0, _len1 = arrayClone.length; _j < _len1; i = ++_j) {
          item = arrayClone[i];
          if (__indexOf.call(array, item) < 0) {
            _results.push([i]);
          }
        }
        return _results;
      })();
      added = (function() {
        var _j, _len1, _results;

        _results = [];
        for (i = _j = 0, _len1 = array.length; _j < _len1; i = ++_j) {
          item = array[i];
          if (__indexOf.call(arrayClone, item) < 0) {
            _results.push([i, item]);
          }
        }
        return _results;
      })();
      for (_j = 0, _len1 = removed.length; _j < _len1; _j++) {
        args = removed[_j];
        remove.apply(null, args);
      }
      for (_k = 0, _len2 = added.length; _k < _len2; _k++) {
        args = added[_k];
        add.apply(null, args);
      }
      return arrayClone = toArray(array);
    };
    Object.observe(array, function(changes) {
      var c;

      changes = (function() {
        var _j, _len1, _results;

        _results = [];
        for (_j = 0, _len1 = changes.length; _j < _len1; _j++) {
          c = changes[_j];
          if (isDigit(c.name)) {
            _results.push(c);
          }
        }
        return _results;
      })();
      if (changes.length) {
        return change();
      }
    });
    return fragment;
  };

}).call(this);
